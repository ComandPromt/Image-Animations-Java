package com.defano.jsegue;

import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.intellij.uiDesigner.core.Spacer;

import javax.swing.*;
import java.awt.*;
import java.awt.image.BufferedImage;
import java.util.concurrent.TimeUnit;

public class JSegueDemo implements SegueAnimationObserver, SegueCompletionObserver {

    private AnimatedSegue effect;
    private SegueName name;

    private JFrame frame;
    private JLabel image;
    private JCheckBox blend;
    private JComboBox effectSelection;
    private JPanel demoPanel;

    public static void main(String[] argc) {
        new JSegueDemo();
    }

    public JSegueDemo() {
        frame = new JFrame("JSegue Demo");
        frame.setLayout(new BorderLayout());
        frame.setPreferredSize(new Dimension(300, 300));
        frame.pack();
        frame.setVisible(true);
        frame.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);

        frame.add(demoPanel);
        image.setSize(150, 150);

        ComboBoxModel effectNames = new DefaultComboBoxModel<>(SegueName.values());
        effectSelection.setModel(effectNames);
        effectSelection.addActionListener(e -> {
            run((SegueName) effectSelection.getSelectedItem());
        });

        blend.addActionListener(e -> {
            run(name);
        });

        run(SegueName.DISSOLVE);
    }

    private void run(SegueName name) {
        this.name = name;

        if (effect != null) {
            effect.stop();
        }

        effect = SegueBuilder.of(name)
                .withSource(getBlueCircle(image.getWidth(), image.getHeight()))
                .withDestination(getOrangeRect(image.getWidth(), image.getHeight()))
                .withDuration(1000, TimeUnit.MILLISECONDS)
                .withMaxFramesPerSecond(30)
                .withAnimationObserver(this)
                .withCompletionObserver(this)
                .alphaBlend(blend.isSelected())
                .build();

        effect.start();
    }

    public static BufferedImage getBlueCircle(int width, int height) {
        BufferedImage src = new BufferedImage(width, height, BufferedImage.TYPE_INT_ARGB);
        Graphics2D g = src.createGraphics();
        g.setPaint(new Color(10,53,150));
        g.fillOval(0, 0, (int) (width * .75), (int) (height * .75));
        g.dispose();

        return src;
    }

    public static BufferedImage getOrangeRect(int width, int height) {
        BufferedImage src = new BufferedImage(width, height, BufferedImage.TYPE_INT_ARGB);
        Graphics2D g = src.createGraphics();
        g.setPaint(new Color(235,111,46));
        g.fillRect((int) (width * .25), (int) (height * .25), (int) (width * .75), (int) (height * .75));
        g.dispose();

        return src;
    }

    @Override
    public void onSegueAnimationCompleted(AnimatedSegue segue) {
        BufferedImage to = segue.getSource();
        BufferedImage from = segue.getDestination();

        segue.setDestination(to);
        segue.setSource(from);
        segue.start();
    }

    @Override
    public void onFrameRendered(AnimatedSegue segue, BufferedImage image) {
        this.image.setIcon(new ImageIcon(image));
        this.image.repaint();
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        final JPanel panel1 = new JPanel();
        panel1.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        demoPanel = new JPanel();
        demoPanel.setLayout(new GridLayoutManager(4, 1, new Insets(0, 0, 0, 0), -1, -1));
        panel1.add(demoPanel, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        image = new JLabel();
        image.setText("");
        demoPanel.add(image, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        blend = new JCheckBox();
        blend.setText("Blend");
        demoPanel.add(blend, new GridConstraints(2, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        effectSelection = new JComboBox();
        demoPanel.add(effectSelection, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final Spacer spacer1 = new Spacer();
        demoPanel.add(spacer1, new GridConstraints(3, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_VERTICAL, 1, GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
    }
}
